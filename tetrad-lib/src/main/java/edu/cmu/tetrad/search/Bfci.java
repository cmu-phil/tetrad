/// ////////////////////////////////////////////////////////////////////////////
// For information as to what this class does, see the Javadoc, below.       //
// Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,       //
// 2007, 2008, 2009, 2010, 2014, 2015, 2022 by Peter Spirtes, Richard        //
// Scheines, Joseph Ramsey, and Clark Glymour.                               //
//                                                                           //
// This program is free software; you can redistribute it and/or modify      //
// it under the terms of the GNU General Public License as published by      //
// the Free Software Foundation; either version 2 of the License, or         //
// (at your option) any later version.                                       //
//                                                                           //
// This program is distributed in the hope that it will be useful,           //
// but WITHOUT ANY WARRANTY; without even the implied warranty of            //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //
// GNU General Public License for more details.                              //
//                                                                           //
// You should have received a copy of the GNU General Public License         //
// along with this program; if not, write to the Free Software               //
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA //
/// ////////////////////////////////////////////////////////////////////////////
package edu.cmu.tetrad.search;

import edu.cmu.tetrad.graph.Graph;
import edu.cmu.tetrad.search.score.Score;
import edu.cmu.tetrad.util.TetradLogger;

/**
 * Uses BOSS in the GFCI-T algorithm.
 * <p>
 * For BOSS only a score is needed, but GFCI-T requires a test, so both are needed.
 * <p>
 * This class is configured to respect knowledge of forbidden and required edges, including knowledge of temporal
 * tiers.
 *
 * @author josephramsey
 * @author bryan andrews
 * @version $Id: $Id
 * @see GfciT
 * @see Boss
 */
public final class Bfci extends GfciT {
    /**
     * The score.
     */
    private final Score score;
    /**
     * The number of times to restart the search.
     * <p>
     * The search algorithm may converge to a suboptimal solution. To mitigate this, the algorithm can be restarted
     * multiple times with different initial conditions. The {@code numStarts} variable represents the number of times
     * the search algorithm will be restarted.
     * </p>
     *
     * @see Bfci#setNumStarts(int)
     * @see Bfci#search()
     */
    private int numStarts = 1;
    /**
     * Determines whether the Boss search algorithm should use the BES (Backward elimination of shadows) method as a
     * final step.
     */
    private boolean bossUseBes = false;
    /**
     * The number of threads to use for parallel processing. This variable determines the degree of parallelism for
     * certain operations that can be performed concurrently to improve performance. For example, in multithreaded
     * environments, setting this variable to a value greater than 1 can distribute work across multiple threads,
     * allowing for faster execution of the algorithm.
     * <p>
     * The value of this variable must be at least 1. By default, it is set to 1, meaning that only one thread will be
     * used for processing.
     */
    private int numThreads = 1;

    /**
     * Constructor. The test and score should be for the same data.
     *
     * @param test  The test to use.
     * @param score The score to use.
     * @see IndependenceTest
     * @see Score
     */
    public Bfci(IndependenceTest test, Score score) {
        super(test);
        if (score == null) {
            throw new NullPointerException("Score is null");
        }
        this.score = score;
    }

    /**
     * Executes the Markov CPDAG search algorithm using the BOSS (Best Order Score Search) method and returns the
     * resulting graph. The algorithm is initialized and configured based on the current state of the Bfci instance,
     * including scoring, knowledge constraints, and multithreading options.
     *
     * @return The resulting Markov CPDAG (Completed Partially Directed Acyclic Graph) generated by the search
     * algorithm.
     * @throws InterruptedException if the thread executing the search is interrupted.
     */
    public Graph getMarkovCpdag() throws InterruptedException {
        if (isVerbose()) {
            TetradLogger.getInstance().log("Starting BOSS.");
        }

        Boss subAlg = new Boss(this.score);
        subAlg.setUseBes(bossUseBes);
        subAlg.setNumStarts(this.numStarts);
        subAlg.setNumThreads(numThreads);
        subAlg.setVerbose(isVerbose());
        PermutationSearch alg = new PermutationSearch(subAlg);
        alg.setKnowledge(getKnowledge());
        Graph cpdag = alg.search();

        if (isVerbose()) {
            TetradLogger.getInstance().log("Finished BOSS.");
        }

        return cpdag;
    }

    /**
     * Returns the number of times to restart the search.
     *
     * @param numStarts The number of times to restart the search.
     */
    public void setNumStarts(int numStarts) {
        this.numStarts = numStarts;
    }

    /**
     * Sets whether the BES should be used.
     *
     * @param useBes True if the BES should be used, false otherwise.
     */
    public void setBossUseBes(boolean useBes) {
        this.bossUseBes = useBes;
    }

    /**
     * Sets the number of threads to use.
     *
     * @param numThreads The number of threads to use. Must be at least 1.
     */
    public void setNumThreads(int numThreads) {
        if (numThreads < 1) {
            throw new IllegalArgumentException("Number of threads must be at least 1: " + numThreads);
        }
        this.numThreads = numThreads;
    }
}

